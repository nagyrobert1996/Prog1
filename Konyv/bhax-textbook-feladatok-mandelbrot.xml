<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section xml:id="bhax-textbook-feladatok-mandelbrot.Mandelbrot">
        <title>A Mandelbrot halmaz</title>
        <para>
            Írj olyan C programot, amely kiszámolja a Mandelbrot halmazt!     
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/nagyrobert1996/Prog1/tree/master/Mandelbrot/Mandelbrot">https://github.com/nagyrobert1996/Prog1/tree/master/Mandelbrot/Mandelbrot</link> 
        </para>
            
		<para>A Mandelbrot halmaz bemutatásához és annak megértéséhez szükséges hogy egy minimális szinten ismerjük a komplex számokat. A komplex számokat már nem egy számegyenesen ábrázoljuk hanem egy szám síkon. Ez a szám halmaz arra lett kitalálva hogy egy olyan értéket is ki lehessen számolni amit alap esetben nem tudnánk. Ez pedig nem más mint a gyök alatti mínusz érték. A komplex számok körébe értelmezhető már az ilyen kifejezés is. Ez pedig úgy lehetséges hogy a gyök alatt mínusz egy egyenlő lesz az i értékkel. Ebből pedig már fel lehet építeni bármilyen negatív számot.</para>
        <para>Maga a Mandelbrot halmaz egy olyan számhalmaz melyben a komlex számokat az alábbi képlettel számoljuk ki: z<subscript>n+1</subscript>=z<subscript>n</subscript><superscript>2</superscript>+c, (0&lt;=n). A képlet segítségével kapott számok lényege hogy abszolut értékük korlátos, azaz nem tartanak a végtelenbe.</para>  
		<mediaobject>
            <imageobject>
                <imagedata fileref="mandel.png" scale="40" />
            </imageobject>
        </mediaobject>

    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            Írj olyan C++ programot, amely kiszámolja a Mandelbrot halmazt!                     
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/nagyrobert1996/Prog1/tree/master/Mandelbrot/Complex_osztaly">https://github.com/nagyrobert1996/Prog1/tree/master/Mandelbrot/Complex_osztaly</link>                
        </para>
		<para>Ebben a feladatban az előző feladatban megismert Mandelbrot halmaznak a kódja található az std::complex segítségével. Ahhoz hogy a complex osztály függvényei használhatóak legyenek a kódban include-olni kell a complex-et. A program forássa lentebb tekinthető meg.</para>
        
        <programlisting language="c++">
<![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;

  if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }

  png::image < png::rgb_pixel > kep ( szelesseg, magassag );

  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;

  std::cout << "Szamitas\n";

  // j megy a sorokon
  for ( int j = 0; j < magassag; ++j )
    {
      // k megy az oszlopokon

      for ( int k = 0; k < szelesseg; ++k )
        {

          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam

          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }

  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}
]]>
        </programlisting>        
    </section>        
                
    <section>
        <title>Biomorfok</title>
		<para>
            Megoldás forrása: <link xlink:href="https://github.com/nagyrobert1996/Prog1/tree/master/Mandelbrot/Biomorf">https://github.com/nagyrobert1996/Prog1/tree/master/Mandelbrot/Biomorf</link>
        </para>
        <para>A biomorfok másnéven Julia halmazok a Mandelbrot halmazokhoz köthető. Ezen halmazok összefüggenek a Mandelbrot halmazokkal, még pedig úgy hogy a Mandelbrot-os képletben annyi változtatást kell eszközölni hogy a c-t ami ott egy változó érték volt azt ebben az esetben állandó értékre kell állítani.</para>           
            
        <programlisting language="c++">
<![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }

    png::image < png::rgb_pixel > kep ( szelesseg, magassag );

    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;

    std::complex<double> cc ( reC, imC );

    std::cout << "Szamitas\n";

    // j megy a sorokon
    for ( int y = 0; y < magassag; ++y )
    {
        // k megy az oszlopokon

        for ( int x = 0; x < szelesseg; ++x )
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + cc;
                //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }

        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }

    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;

}
]]>
        </programlisting>                                 
                                          
                                                                            
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/nagyrobert1996/Prog1/tree/master/Mandelbrot/CUDA">https://github.com/nagyrobert1996/Prog1/tree/master/Mandelbrot/CUDA</link>
        </para>
		
		
		
		<para>Ebben a feladatban már a korábban megismert Mandelbrot halmazt számoljuk ki ismét. Annyi a megoldásban a változás hogy most a grafikus kártya CUDA magjait használjuk hozzá. Azáltal hogy a CUDA magokat használjuk párhuzamosan nem a processzor egy magját, a számítási műveletek lénygesen gyorsabbak lesznek. Akár 50-70 százalékos gyorsulást is tapasztalhatunk úgy hogy ezt a megoldást használjuk. </para>
		
		
		
		
		
		
		<programlisting language="c++">
<![CDATA[
#include <png++/image.hpp>
#include <png++/rgb_pixel.hpp>

#include <sys/times.h>
#include <iostream>


#define MERET 600
#define ITER_HAT 32000

__device__ int
mandel (int k, int j)
{
  // Végigzongorázza a CUDA a szélesség x magasság rácsot:
  // most eppen a j. sor k. oszlopaban vagyunk

  // számítás adatai
  float a = -2.0, b = .7, c = -1.35, d = 1.35;
  int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;

  // a számítás
  float dx = (b - a) / szelesseg;
  float dy = (d - c) / magassag;
  float reC, imC, reZ, imZ, ujreZ, ujimZ;
  // Hány iterációt csináltunk?
  int iteracio = 0;

  // c = (reC, imC) a rács csomópontjainak
  // megfelelő komplex szám
  reC = a + k * dx;
  imC = d - j * dy;
  // z_0 = 0 = (reZ, imZ)
  reZ = 0.0;
  imZ = 0.0;
  iteracio = 0;
  // z_{n+1} = z_n * z_n + c iterációk
  // számítása, amíg |z_n| < 2 vagy még
  // nem értük el a 255 iterációt, ha
  // viszont elértük, akkor úgy vesszük,
  // hogy a kiinduláci c komplex számra
  // az iteráció konvergens, azaz a c a
  // Mandelbrot halmaz eleme
  while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
    {
      // z_{n+1} = z_n * z_n + c
      ujreZ = reZ * reZ - imZ * imZ + reC;
      ujimZ = 2 * reZ * imZ + imC;
      reZ = ujreZ;
      imZ = ujimZ;

      ++iteracio;

    }
  return iteracio;
}


/*
__global__ void
mandelkernel (int *kepadat)
{

  int j = blockIdx.x;
  int k = blockIdx.y;

  kepadat[j + k * MERET] = mandel (j, k);

}
*/

__global__ void
mandelkernel (int *kepadat)
{

  int tj = threadIdx.x;
  int tk = threadIdx.y;

  int j = blockIdx.x * 10 + tj;
  int k = blockIdx.y * 10 + tk;

  kepadat[j + k * MERET] = mandel (j, k);

}

void
cudamandel (int kepadat[MERET][MERET])
{

  int *device_kepadat;
  cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));

  // dim3 grid (MERET, MERET);
  // mandelkernel <<< grid, 1 >>> (device_kepadat);
  
  dim3 grid (MERET / 10, MERET / 10);
  dim3 tgrid (10, 10);
  mandelkernel <<< grid, tgrid >>> (device_kepadat);  
  
  cudaMemcpy (kepadat, device_kepadat,
	      MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
  cudaFree (device_kepadat);

}

int
main (int argc, char *argv[])
{

  // Mérünk időt (PP 64)
  clock_t delta = clock ();
  // Mérünk időt (PP 66)
  struct tms tmsbuf1, tmsbuf2;
  times (&tmsbuf1);

  if (argc != 2)
    {
      std::cout << "Hasznalat: ./mandelpngc fajlnev";
      return -1;
    }

  int kepadat[MERET][MERET];

  cudamandel (kepadat);

  png::image < png::rgb_pixel > kep (MERET, MERET);

  for (int j = 0; j < MERET; ++j)
    {
      //sor = j;
      for (int k = 0; k < MERET; ++k)
	{
	  kep.set_pixel (k, j,
			 png::rgb_pixel (255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT));
	}
    }
  kep.write (argv[1]);

  std::cout << argv[1] << " mentve" << std::endl;

  times (&tmsbuf2);
  std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
    + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

  delta = clock () - delta;
  std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

}

]]>
        </programlisting> 
		
		
		
		
		
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
		<para>
            Megoldás forrása: <link xlink:href="https://github.com/nagyrobert1996/Prog1/tree/master/Mandelbrot/Nagyito">https://github.com/nagyrobert1996/Prog1/tree/master/Mandelbrot/Nagyito</link>
        </para>
		
		
		<para>Ennek a feladatnak a megoldásához szükségünk van egy grafikus interfészre, ami nem lesz más mint a QT GUI. Ez egy nagyon elterjedt interfész a C++ nyelvben.</para>
		<para>A program ezen megoldásában az a lényeg hogy úgy hozzuk létre a  Mandelbrot halmazt hogy az "változzon". Ezt úgy kell érteni hogy ha elkezdjük nagyítani a képet akkor a program újra számolja a Mandelbrot halmazt. Ugyanis ez a halmaz végtelen, aminek egyszerre véges sok elemét számoljuk ki. Viszont ha nagyítunk rajta akkor ott újabb értékek kerülnek kiszámításra. Ha eléggé bele nagyítunk akkor észre fogjuk venni hogy újabb Mandelbrot halmaz jelenik meg az eredetin belül és ez ismétlődik a végtelenségig.</para>
		
		
		
		<para>A program futtatásának menete a következőképpen néz ki. Először is telepíteni kell a <command>sudo apt-get install libqt4-dev</command>-et. Ez után futtatni kell egy parancsot mely a <command>qmake -project</command>. Ha ez megvan akkor a létrejött fájlt meg kell nyitni és abba bele kell illeszteni a következő sort: <command>QT += widgets</command>. Majd mentjük a módosítást és kilépünk. Ez után egy újabb parancsot futtatunk ami a <command>qmake mandelmozgatoc++.pro</command>. Ez készít egy make fájlt. Ezt a létrejött fájlt futtatjuk úgy hogy egyszerűen beírjuk a make parancsot a terminálba. Ha ezzel is kész vagyunk akkor pedig a létrejött fájlt már a szokásos ./fájlnév paranccsal futtatjuk.</para>
		
		
		
		
		
		
		
		
		
		
		
		
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/nagyrobert1996/Prog1/tree/master/Mandelbrot/java_nagyito">https://github.com/nagyrobert1996/Prog1/tree/master/Mandelbrot/java_nagyito</link>
        </para>
		
		
		
		<para>A feladat megoldása nagyban hasonlít az előzőhöz. A különbség annyi hogy ebben a kódban nem a C++ nyelvet használjuk hanem a java-t. Az eredmény ugyan az lesz mint a C++-os verziónál csak itt a java-s megoldásokat használuk mivel itt azok fognak működni.</para>
		
		<para>A kód futtatásához fel kell telepíteni a <command>sudo apt-get install openjdk-8-jdk</command>-t. Ez után két egyszerű sor a terminálba és kész is van. Az első: <command>javac MandelbrotHalmazNagyító.java</command>. A második: <command>java MandelbrotHalmazNagyító</command>. A második sor beírása után meg is nyillik az ablak benne a Mandelbrot halmazzal. A nagyítás itt is úgy működik mint a C++-os verziónál, annyi a különbség hogy ebben a megoldásban van egy kis hiba. Amikor nagyítunk, a nagyított kép mindig új ablakban nyillik meg.</para>
		
    </section>

</chapter>                
