<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
        <para>
            Írj Qt C++-ban egy hangyaszimulációs programot, a forrásaidról utólag reverse engineering jelleggel
            készíts UML osztálydiagramot is!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/nagyrobert1996/Prog1/tree/master/Conway/Hangya">https://github.com/nagyrobert1996/Prog1/tree/master/Conway/Hangya</link>
        </para>
        <para>A feladat mint ahogyan a címében is szerepel egy szimuláció. Az alapelv a hangyákon alapul. A program célja hogy adott pontok között megkeresse a legoptimálisabb utat -akár a hangyák- jelen esetben ez a legrövidebb utat. Ezt úgy valósítja meg hogy a mi "hangyáink" elindulnak egy cél felé. Megfigyelhetjük hogy egy idő után ha a többi hangya is arra a célra tart, akkor az útvonalak egyre rövidebbek lesznek míg végül megtalálják a legjobbat. Ha ez megvan, akkor onnantól kezdve minden hangya azt az utat fogja követni.</para>


		<mediaobject>
                <imageobject>
                    <imagedata fileref="hangya.png" scale="40" />
                </imageobject>
        </mediaobject>





		
    </section>        
    <section>
        <title>Java életjáték</title>
        <para>
            Írd meg Java-ban a John Horton Conway-féle életjátékot, 
            valósítsa meg a sikló-kilövőt!
        </para>
        <para>A Conway-féle életjáték lényege egy szimulációs játék. A játék egy népesség növekedést és csökkenést szimulál leegyszerűsített formában. Habár játéknak hívják igazából nem igazán tekinthető annak mivel nincs szükség játékosra hozzá. Egyedüli szerepe talán annyi lehet hogy a kiindulási állapotot ő határozza meg de ezen felül nincs rá szükség. Valójában matematikai értelemben ez egy sejtautomata.</para>
		<para>A játék három egyszerű szabály alapján működik. Vegyünk egy négyzetrácsos hálót, ez lesz a pálya. Ezen egy egy cellába egy egy sejt tehető bele. Egy sejtnek nyolc szomszédja lehet. A sejtekkel pedig három dolog történhet. Ha a sejtnek 2 vagy 3 szomszédja van akkor a sejt túléli. Ha 3-nál több van akkor túlnépesedés miatt, ha 2-nél kevesebb van akkor pedig elszigetelődés miatt a sejt meghal. Ha pedig egy cella szomszédságában pontosan 3 sejt van, akkor ott létrejön egy új sejt.</para>
		<para>A sikló alakzat lényege hogy folyamatosan önmagába megy át egy bizonyos ciklus alatt. Ezért ez az alakzat nem fog "elbúrjánzani" se, de eltűnni se. Mozgása pdeig az hogy átlósan fefelé kilő egy alakzatot. Ez a sikló alakzat a hackerek hivatalos logója is.</para>


		
		
		
		
<programlisting language="java"><![CDATA[
		
public class Sejtautomata extends java.awt.Frame implements Runnable {
public static final boolean ÉLŐ = true;
public static final boolean HALOTT = false;
protected boolean [][][] rácsok = new boolean [2][][];
protected boolean [][] rács;
protected int rácsIndex = 0;
protected int cellaSzélesség = 20;
protected int cellaMagasság = 20;
protected int szélesség = 20;
protected int magasság = 10;
protected int várakozás = 1000;
private java.awt.Robot robot;
private boolean pillanatfelvétel = false;
private static int pillanatfelvételSzámláló = 0;

public Sejtautomata(int szélesség, int magasság) {
        this.szélesség = szélesség;
        this.magasság = magasság;
        rácsok[0] = new boolean[magasság][szélesség];
        rácsok[1] = new boolean[magasság][szélesség];
        rácsIndex = 0;
        rács = rácsok[rácsIndex];
        for(int i=0; i<rács.length; ++i)
            for(int j=0; j<rács[0].length; ++j)
                rács[i][j] = HALOTT;
        siklóKilövő(rács, 5, 60);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent e) {
                setVisible(false);
                System.exit(0);
        }
});

addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent e) {
                if(e.getKeyCode() == java.awt.event.KeyEvent.VK_K) {
                    cellaSzélesség /= 2;
                    cellaMagasság /= 2;
                    setSize(Sejtautomata.this.szélesség*cellaSzélesség,
                            Sejtautomata.this.magasság*cellaMagasság);
                    validate();
            } else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_N) {
                    cellaSzélesség *= 2;
                    cellaMagasság *= 2;
                    setSize(Sejtautomata.this.szélesség*cellaSzélesség,
                            Sejtautomata.this.magasság*cellaMagasság);
                    validate();
            } else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_S)
                    pillanatfelvétel = !pillanatfelvétel;
                else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_G)
                    várakozás /= 2;
                else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_L)
                    várakozás *= 2;
                repaint();
        }
});

addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent m) {
                int x = m.getX()/cellaSzélesség;
                int y = m.getY()/cellaMagasság;
                rácsok[rácsIndex][y][x] = !rácsok[rácsIndex][y][x];
                repaint();
    }
});

addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent m) {
                int x = m.getX()/cellaSzélesség;
                int y = m.getY()/cellaMagasság;
                rácsok[rácsIndex][y][x] = ÉLŐ;
                repaint();
    }
});

cellaSzélesség = 10;
cellaMagasság = 10;
try {
            robot = new java.awt.Robot(
                    java.awt.GraphicsEnvironment.
                    getLocalGraphicsEnvironment().
                    getDefaultScreenDevice());
    } catch(java.awt.AWTException e) {
            e.printStackTrace();
}

setTitle("Sejtautomata");
setResizable(false);
setSize(szélesség*cellaSzélesség,
                magasság*cellaMagasság);
setVisible(true);
new Thread(this).start();
}

public void paint(java.awt.Graphics g) {
        boolean [][] rács = rácsok[rácsIndex];
        for(int i=0; i<rács.length; ++i) {
            for(int j=0; j<rács[0].length; ++j) {
                if(rács[i][j] == ÉLŐ)
                    g.setColor(java.awt.Color.BLACK);
                else
                    g.setColor(java.awt.Color.WHITE);
                g.fillRect(j*cellaSzélesség, i*cellaMagasság,
                        cellaSzélesség, cellaMagasság);
                g.setColor(java.awt.Color.LIGHT_GRAY);
                g.drawRect(j*cellaSzélesség, i*cellaMagasság,
                        cellaSzélesség, cellaMagasság);
    }
}

        if(pillanatfelvétel) {
            pillanatfelvétel = false;
            pillanatfelvétel(robot.createScreenCapture
                    (new java.awt.Rectangle
                    (getLocation().x, getLocation().y,
                    szélesség*cellaSzélesség,
                    magasság*cellaMagasság)));
    }
}

public int szomszédokSzáma(boolean [][] rács,
            int sor, int oszlop, boolean állapot) {        
        int állapotúSzomszéd = 0;
        for(int i=-1; i<2; ++i)
            for(int j=-1; j<2; ++j)
                if(!((i==0) && (j==0))) {
            int o = oszlop + j;
            if(o < 0)
                o = szélesség-1;
            else if(o >= szélesség)
                o = 0;
            
            int s = sor + i;
            if(s < 0)
                s = magasság-1;
            else if(s >= magasság)
                s = 0;
            
            if(rács[s][o] == állapot)
                ++állapotúSzomszéd;
                }
        
        return állapotúSzomszéd;
}

public void időFejlődés() {
        
        boolean [][] rácsElőtte = rácsok[rácsIndex];
        boolean [][] rácsUtána = rácsok[(rácsIndex+1)%2];
        
        for(int i=0; i<rácsElőtte.length; ++i) {
            for(int j=0; j<rácsElőtte[0].length; ++j) {
                
                int élők = szomszédokSzáma(rácsElőtte, i, j, ÉLŐ);
                
                if(rácsElőtte[i][j] == ÉLŐ) {

                    if(élők==2 || élők==3)
                        rácsUtána[i][j] = ÉLŐ;
                    else
                        rácsUtána[i][j] = HALOTT;
        }  else {

                    if(élők==3)
                        rácsUtána[i][j] = ÉLŐ;
                    else
                        rácsUtána[i][j] = HALOTT;
            }
        }
    }
        rácsIndex = (rácsIndex+1)%2;
}

public void run() {
        
        while(true) {
            try {
                Thread.sleep(várakozás);
            } catch (InterruptedException e) {}
            
            időFejlődés();
            repaint();
        }
}

public void sikló(boolean [][] rács, int x, int y) {
        
        rács[y+ 0][x+ 2] = ÉLŐ;
        rács[y+ 1][x+ 1] = ÉLŐ;
        rács[y+ 2][x+ 1] = ÉLŐ;
        rács[y+ 2][x+ 2] = ÉLŐ;
        rács[y+ 2][x+ 3] = ÉLŐ;
        
}
   
public void siklóKilövő(boolean [][] rács, int x, int y) {
        
        rács[y+ 6][x+ 0] = ÉLŐ;
        rács[y+ 6][x+ 1] = ÉLŐ;
        rács[y+ 7][x+ 0] = ÉLŐ;
        rács[y+ 7][x+ 1] = ÉLŐ;
        
        rács[y+ 3][x+ 13] = ÉLŐ;
        
        rács[y+ 4][x+ 12] = ÉLŐ;
        rács[y+ 4][x+ 14] = ÉLŐ;
        
        rács[y+ 5][x+ 11] = ÉLŐ;
        rács[y+ 5][x+ 15] = ÉLŐ;
        rács[y+ 5][x+ 16] = ÉLŐ;
        rács[y+ 5][x+ 25] = ÉLŐ;
        
        rács[y+ 6][x+ 11] = ÉLŐ;
        rács[y+ 6][x+ 15] = ÉLŐ;
        rács[y+ 6][x+ 16] = ÉLŐ;
        rács[y+ 6][x+ 22] = ÉLŐ;
        rács[y+ 6][x+ 23] = ÉLŐ;
        rács[y+ 6][x+ 24] = ÉLŐ;
        rács[y+ 6][x+ 25] = ÉLŐ;
        
        rács[y+ 7][x+ 11] = ÉLŐ;
        rács[y+ 7][x+ 15] = ÉLŐ;
        rács[y+ 7][x+ 16] = ÉLŐ;
        rács[y+ 7][x+ 21] = ÉLŐ;
        rács[y+ 7][x+ 22] = ÉLŐ;
        rács[y+ 7][x+ 23] = ÉLŐ;
        rács[y+ 7][x+ 24] = ÉLŐ;
        
        rács[y+ 8][x+ 12] = ÉLŐ;
        rács[y+ 8][x+ 14] = ÉLŐ;
        rács[y+ 8][x+ 21] = ÉLŐ;
        rács[y+ 8][x+ 24] = ÉLŐ;
        rács[y+ 8][x+ 34] = ÉLŐ;
        rács[y+ 8][x+ 35] = ÉLŐ;
        
        rács[y+ 9][x+ 13] = ÉLŐ;
        rács[y+ 9][x+ 21] = ÉLŐ;
        rács[y+ 9][x+ 22] = ÉLŐ;
        rács[y+ 9][x+ 23] = ÉLŐ;
        rács[y+ 9][x+ 24] = ÉLŐ;
        rács[y+ 9][x+ 34] = ÉLŐ;
        rács[y+ 9][x+ 35] = ÉLŐ;
        
        rács[y+ 10][x+ 22] = ÉLŐ;
        rács[y+ 10][x+ 23] = ÉLŐ;
        rács[y+ 10][x+ 24] = ÉLŐ;
        rács[y+ 10][x+ 25] = ÉLŐ;
        
        rács[y+ 11][x+ 25] = ÉLŐ;
        
}

public void pillanatfelvétel(java.awt.image.BufferedImage felvetel) {
        StringBuffer sb = new StringBuffer();
        sb = sb.delete(0, sb.length());
        sb.append("sejtautomata");
        sb.append(++pillanatfelvételSzámláló);
        sb.append(".png");
        try {
            javax.imageio.ImageIO.write(felvetel, "png",
                    new java.io.File(sb.toString()));
        } catch(java.io.IOException e) {
            e.printStackTrace();
        }
}
  
public void update(java.awt.Graphics g) {
        paint(g);
}    
  
public static void main(String[] args) {
        new Sejtautomata(100, 75);
    }

		

]]></programlisting>
		
		
		
		





		
    </section>        
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Most Qt C++-ban!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/nagyrobert1996/Prog1/tree/master/Conway/QT_elet">https://github.com/nagyrobert1996/Prog1/tree/master/Conway/QT_elet</link>
        </para>
        <para>Ebben a feladatban szintén az életjáték megvalósítása a cél. Az előző felathoz hasonlóan itt is ugyanazon az elven dolgozzuk ki a megoldást. Létrehozzuk a rácshálót melybe belehelyezzük az alap sejteket és elindítjuk a program futását. Ha ezzel megvagyunk akkor már nincs más dolgunk mint hogy megfigyeljük ahogyan a sikló-kilövő szépen sorban elkezdi átlósan lefelé kilőni az alakzatokat.</para>






		
    </section>        
    <section>
        <title>BrainB Benchmark</title>
        
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/nagyrobert1996/Prog1/tree/master/Conway/BrainB">https://github.com/nagyrobert1996/Prog1/tree/master/Conway/BrainB</link>
        </para>
        <para>A program célja hogy egy személy koncentrációs képességét felmérje. Ezt úgy valósítja meg hogy a képernyőn több egyforma obijektum van amik úgy néznek ki hogy egy négyzet benne egy körrel. Ezekből egyet kiválasztva az egeret a körre kell vinni és azon tartani. Ha ez sikerül akkor egyre több fog belőlük megjelenni és egyre gyorsabban fognak mozogni. A cél az hogy minél tovább tartsd az egeret az elsőnek kiválasztott ponton. Ha nem sikerül és elveszted akkor elkezdenek lassulni és csökken is az obijektumok száma.</para>
		<para>Ez egy kiváló tesztelése a koncentrációs képességnek. Például az esportolók körében is használható. Fel lehet vele mérni hogy egy játékos mennyire tud koncentrálni a saját karakterére egy tömeg esemeény során.</para>







		
    </section>        

</chapter>                
